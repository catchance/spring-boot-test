group 'org.chance'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
//        classpath 'org.springframework:springloaded:1.2.4.RELEASE'
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'idea'
//apply plugin: 'war'

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

repositories {
    jcenter()
}

dependencies {
    compile("javax.servlet:jstl")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile("net.sf.ehcache:ehcache")
    compile("org.flywaydb:flyway-core")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")
//    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.security:spring-security-taglibs")
    provided("org.apache.tomcat.embed:tomcat-embed-jasper")
    provided("org.springframework.boot:spring-boot-starter-tomcat")
    //optional provided
//    optional("log4j:log4j:1.2.17")
//    provided("javax.servlet:javax.servlet-api:3.0.1")

    compile("mysql:mysql-connector-java:5.1.34")
    runtime("com.h2database:h2")

    testCompile("org.testng:testng:6.8.13")
    testCompile("org.assertj:assertj-core:2.3.0")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//war {
//    baseName = 'myapp'
//    version = '0.5.0'
//}

//idea {
//    module {
//        inheritOutputDirs = false
//        outputDir = file("$buildDir/classes/main/")
//        testOutputDir = file("$buildDir/classes/test/")
//    }
//}

bootRun {
    addResources = true
}

springBoot {
    mainClass = 'org.chance.Application'
//    mainClass = 'org.springframework.boot.devtools.RemoteSpringApplication'
    excludeDevtools = true
}

test {
    useTestNG()
}